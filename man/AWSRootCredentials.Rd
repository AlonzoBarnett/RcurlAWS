% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AWSRootCredentials.R
\docType{data}
\name{AWSRootCredentials}
\alias{AWSRootCredentials}
\title{AWS Root Credential Manager}
\format{An object of class \code{R6ClassGenerator} of length 24.}
\usage{
AWSRootCredentials
}
\arguments{
\item{AWS_ACCESS_KEY_ID}{Your AWS root account access id}

\item{AWS_SECRET_ACCESS_KEY}{Your AWS root account secret key}

\item{sourceFile}{Location of credentials file ex. ~/.aws/.credential}

\item{profileName}{Name of the profile you wish to invoke
'defualt' is used unless otherwise explicitly declared}
}
\description{
R6 implementation of AWS Root credential searches and management

\code{AWSRootCredentials$new(AWS_ACCESS_KEY_ID = NULL,
                          AWS_SECRET_ACCESS_KEY = NULL,
                          sourceFile = NULL,
                          profileName = "default",
                          .silent = T)
}

\code{AWSRootCredentials$print()}
}
\details{
On initialization if you pass an access and secret key,  
    the search is skipped and the keys you passed are used.  
    Print method, prints only *s to protect your keys.  
 
You can use $ to force print of an attribute if you really want to have
    it hanging around on your screen.
 
If no arguments are provided, credential priority... not search order
    but what will be returned if found... is loosely based on typical SDK fashion:
      \enumerate{
          \item Environment variables "AWS_ACCESS_KEY_ID", "AWS_SECRET_ACCESS_KEY"
          \item Credentials file
      }
 
It is assumed your credentials file follows the guidelines at:  
    \url{https://docs.aws.amazon.com/cli/latest/userguide/cli-config-files.html}{AWS CLI Configuration and Credential Files}  
 
If you have multiple profiles in the credentials file,  
    a profile labeled "default" will be searched for UNLESS you explicitly  
    declare the profile name to return.  

\strong{Differences from SDK Implementations}  
    \enumerate{
      \item If Credentials file pointed to explicitly, then this is the only location checked. This is a more intuative behavior; if I tell you where to look, don't give me results from some other location.
      \item Instance MetaData is not searched; this is done with AWSTemporaryCredentials$new().
}

AWSRootCredentials are a simpler class of credentials (only access and secret keys are necessary.  
AWSTemporaryCredentials, which are Role based, are generated by STS.  
I opted to treat root and temporary credentials as distinct class references. This seems less confusing for an end-user then trying to track what will be returned by a single class when referencing the two different credential sources.
}
\examples{
\dontrun{rootCreds <- AWSRootCredentials$new()}
\dontrun{rootCreds <- AWSRootCredentials$new(credentialPrefix = "/i/hide/my/files")}
Provide filenames if not using 'config' & 'credentials'
\dontrun{rootCreds <- AWSRootCredentials$new(
   credentialPrefix = "/i/hide/my/files")}
   credentialFileName = 'myCreds',
   configFileName = 'myConfig'
)
\dontrun{rootCreds <- AWSRootCredentials$new(AWS_ACCESS_KEY_ID = "blahblah", AWS_SECRET_ACCESS_KEY = "blahblah")}
\dontrun{rootCreds}
\dontrun{rootCreds$AWS_ACCESS_KEY_ID}
\dontrun{rootCreds$AWS_SECRET_ACCESS_KEY}
rootCreds$profileSettings

}
\seealso{
Other credential management functions: \code{\link{AWSTemporaryCredentials}},
  \code{\link{RcurlAWS}},
  \code{\link{credsFromInstanceMetadata}},
  \code{\link{genCredentialFilePath}},
  \code{\link{getCredentials}}, \code{\link{getProfiles}},
  \code{\link{getSTSCredentials}},
  \code{\link{parseCredentialFile}},
  \code{\link{stsGenContentString}},
  \code{\link{tempCredentialHandler}}
}
\concept{credential management functions}
\keyword{datasets}
